package com.example.application;import com.aliyuncs.utils.StringUtils;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.PackageConfig;import com.baomidou.mybatisplus.generator.config.StrategyConfig;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import java.io.*;import java.util.Scanner;import java.util.regex.Matcher;import java.util.regex.Pattern;public class CodeGenerator {    private static Pattern linePattern = Pattern.compile("_(\\w)");    public static void main(String[] args) throws IOException {        String[] split = scanner("表名，多个英文逗号分割").split(",");        for (String tableName : split) {            admin(tableName);            user(tableName);//            task(tableName);//            zlb(tableName);            String admin = "admin";            String user = "user";            String task = "task";//            String zlb = "zlb";            updateFile(tableName, admin);            updateFile(tableName, user);//            updateFile(tableName, task);            deleteFile(tableName, "common");        }    }    private static void admin(String tableName) throws IOException {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath + "/atg-admin/src/main/java");        gc.setAuthor("yc");        gc.setFileOverride(true);        gc.setOpen(false);        // gc.setSwagger2(true); 实体属性 Swagger2 注解        gc.setEntityName("%sEntity");        gc.setServiceName("%sService");        gc.setServiceImplName("%sServiceImpl");        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl("jdbc:mysql://192.168.0.130:3306/atg_system_db2?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8&useSSL=false");        // dsc.setSchemaName("public");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("123qwer.");        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();        pc.setParent("com.asto.atg.admin");        pc.setServiceImpl(pc.getService());        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };       /* // 如果模板引擎是 freemarker        String templatePath = "/templates/mapper.xml.ftl";        // 如果模板引擎是 velocity        // String templatePath = "/templates/mapper.xml.vm";        // 自定义输出配置        List<FileOutConfig> focList = new ArrayList<>();        // 自定义配置会被优先输出        focList.add(new FileOutConfig(templatePath) {            @Override            public String outputFile(TableInfo tableInfo) {                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！                return projectPath + "/src/main/resources/mapper/" + pc.getModuleName()                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;            }        });      /*        cfg.setFileCreate(new IFileCreate() {            @Override            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {                // 判断自定义文件夹是否需要创建                checkDir("调用默认方法创建的目录");                return false;            }        });        /**//*        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        // 配置模板        TemplateConfig templateConfig = new TemplateConfig();        // 配置自定义输出模板        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别        // templateConfig.setEntity("templates/entity2.java");        // templateConfig.setService();        // templateConfig.setController();        templateConfig.setXml(null);        mpg.setTemplate(templateConfig);*/        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setSuperEntityClass("com.asto.atg.common.NewBaseEntity");        strategy.setInclude(tableName);        strategy.setExclude();        //strategy.setInclude(scanner("表名，多个英文逗号分割").split(","));        strategy.setLogicDeleteFieldName("del_flag");        strategy.setSuperEntityColumns("id", "del_flag", "last_update_time", "last_update_user_uuid", "create_time", "create_user_uuid");        strategy.setSkipView(true);        strategy.setEntityBooleanColumnRemoveIsPrefix(true);        //strategy.setEntityLombokModel(false);        strategy.setRestControllerStyle(true);        strategy.setSuperControllerClass("com.asto.atg.common.BaseController");        strategy.setSuperServiceImplClass("com.asto.atg.common.BaseServiceImpl");        //strategy.setControllerMappingHyphenStyle(false);        strategy.setTablePrefix(pc.getModuleName() + "_");        mpg.setStrategy(strategy);        //mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }    private static void task(String tableName) throws IOException {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath + "/atg-task/src/main/java");        gc.setAuthor("admin");        gc.setFileOverride(true);        gc.setOpen(false);        // gc.setSwagger2(true); 实体属性 Swagger2 注解        gc.setEntityName("%sEntity");        gc.setServiceName("%sService");        gc.setServiceImplName("%sServiceImpl");        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl("jdbc:mysql://127.0.0.1:3308/atg_system?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8&useSSL=false");        // dsc.setSchemaName("public");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("");        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();        pc.setParent("com.asto.atg.task");        pc.setServiceImpl(pc.getService());        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setSuperEntityClass("com.asto.atg.common.NewBaseEntity");        strategy.setInclude(tableName);        strategy.setExclude();        //strategy.setInclude(scanner("表名，多个英文逗号分割").split(","));        strategy.setLogicDeleteFieldName("del_flag");        strategy.setSuperEntityColumns("id", "del_flag", "last_update_time", "last_update_user_uuid", "create_time", "create_user_uuid");        strategy.setSkipView(true);        strategy.setEntityBooleanColumnRemoveIsPrefix(true);        //strategy.setEntityLombokModel(false);        strategy.setRestControllerStyle(true);//        strategy.setSuperControllerClass("com.asto.atg.common.BaseController");        strategy.setSuperServiceImplClass("com.asto.atg.common.BaseServiceImpl");        //strategy.setControllerMappingHyphenStyle(false);        strategy.setTablePrefix(pc.getModuleName() + "_");        mpg.setStrategy(strategy);        //mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }    private static void updateFile(String tableName, String admin) throws IOException {        String projectPath = System.getProperty("user.dir");        File fileService = new File(projectPath + "/atg-" + admin + "/src/main/java/com/asto/atg/" + admin + "/service/" + lineToHump(tableName) + "Service.java");        if (fileService.exists()) {            replacTextContent(fileService, "import com.asto.atg." + admin + ".entity", "import com.asto.atg.common.entity");        }        File fileServiceImpl = new File(projectPath + "/atg-" + admin + "/src/main/java/com/asto/atg/" + admin + "/service/" + lineToHump(tableName) + "ServiceImpl.java");        if (fileServiceImpl.exists()) {            replacTextContent(fileServiceImpl, "import com.asto.atg." + admin + ".entity", "import com.asto.atg.common.entity");        }        File fileServiceMapper = new File(projectPath + "/atg-" + admin + "/src/main/java/com/asto/atg/" + admin + "/mapper/" + lineToHump(tableName) + "Mapper.java");        if (fileServiceMapper.exists()) {            replacTextContent(fileServiceMapper, "import com.asto.atg." + admin + ".entity", "import com.asto.atg.common.entity");        }    }    private static void deleteFile(String tableName, String admin) throws IOException {        String projectPath = System.getProperty("user.dir");        File fileAdmin = new File(projectPath + "/atg-admin/src/main/java/com/asto/atg/admin/entity/" + lineToHump(tableName) + "Entity.java");        File fileCommon = new File(projectPath + "/atg-" + admin + "/src/main/java/com/asto/atg/" + admin + "/entity/" + lineToHump(tableName) + "Entity.java");//        if (!fileCommon.exists()) {//            fileCommon.createNewFile();//            FileUtils.copyFile(fileAdmin, fileCommon);//        }        File fileAdmins = new File(projectPath + "/atg-admin/src/main/java/com/asto/atg/admin/entity");        File fileUsers = new File(projectPath + "/atg-user/src/main/java/com/asto/atg/user/entity/" + lineToHump(tableName) + "Entity.java");        deleteDir(fileAdmins);        deleteDir(fileUsers);        replacTextContent(fileCommon, "com.asto.atg.admin.entity", "com.asto.atg.common.entity");    }    public static void deleteDir(File file) {        if(file.isFile())        {            file.delete();        }else        {            File[] files = file.listFiles();            if(files == null)            {                file.delete();            }else            {                for (int i = 0; i < files.length; i++)                {                    deleteDir(new File(files[i].getAbsolutePath()));                }                file.delete();            }        }    }//    private static void copyFileUsingApacheCommonsIO(File source, File dest)//            throws IOException {//        FileUtils.copyFile(source, dest);//    }    /**     * 替换文本内容     *     * @param file     * @param srcStr     * @param replaceStr     * @throws IOException     */    public static void replacTextContent(File file, String srcStr, String replaceStr) throws IOException {        FileReader in = new FileReader(file);        BufferedReader bufIn = new BufferedReader(in);        // 内存流, 作为临时流        CharArrayWriter tempStream = new CharArrayWriter();        // 替换        String line = null;        while ((line = bufIn.readLine()) != null) {            // 替换每行中, 符合条件的字符串            line = line.replaceAll(srcStr, replaceStr);            // 将该行写入内存            tempStream.write(line);            // 添加换行符            tempStream.append(System.getProperty("line.separator"));        }        // 关闭 输入流        bufIn.close();        // 将内存中的流 写入 文件        FileWriter out = new FileWriter(file);        tempStream.writeTo(out);        out.close();    }    /**     * 下滑转驼峰     *     * @param str     * @return     */    public static String lineToHump(String str) {        str = str.toLowerCase();        Matcher matcher = linePattern.matcher(str);        StringBuffer sb = new StringBuffer();        while (matcher.find()) {            matcher.appendReplacement(sb, matcher.group(1).toUpperCase());        }        matcher.appendTail(sb);        String s = sb.toString();        s = s.substring(0, 1).toUpperCase() + s.substring(1);        return s;    }    private static void user(String tableName) {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath + "/atg-user/src/main/java");        gc.setAuthor("admin");        gc.setFileOverride(true);        gc.setOpen(false);        // gc.setSwagger2(true); 实体属性 Swagger2 注解        gc.setEntityName("%sEntity");        gc.setServiceName("%sService");        gc.setServiceImplName("%sServiceImpl");        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl("jdbc:mysql://192.168.0.130:3306/atg_system_test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8&useSSL=false");        // dsc.setSchemaName("public");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("123qwer.");        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();        pc.setParent("com.asto.atg.user");        pc.setServiceImpl(pc.getService());        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };       /* // 如果模板引擎是 freemarker        String templatePath = "/templates/mapper.xml.ftl";        // 如果模板引擎是 velocity        // String templatePath = "/templates/mapper.xml.vm";        // 自定义输出配置        List<FileOutConfig> focList = new ArrayList<>();        // 自定义配置会被优先输出        focList.add(new FileOutConfig(templatePath) {            @Override            public String outputFile(TableInfo tableInfo) {                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！                return projectPath + "/src/main/resources/mapper/" + pc.getModuleName()                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;            }        });        *//*        cfg.setFileCreate(new IFileCreate() {            @Override            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {                // 判断自定义文件夹是否需要创建                checkDir("调用默认方法创建的目录");                return false;            }        });        *//*        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        // 配置模板        TemplateConfig templateConfig = new TemplateConfig();        // 配置自定义输出模板        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别        // templateConfig.setEntity("templates/entity2.java");        // templateConfig.setService();        // templateConfig.setController();        templateConfig.setXml(null);        mpg.setTemplate(templateConfig);*/        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setSuperEntityClass("com.asto.atg.common.NewBaseEntity");        strategy.setInclude(tableName);        strategy.setExclude();        //strategy.setInclude(scanner("表名，多个英文逗号分割").split(","));        strategy.setLogicDeleteFieldName("del_flag");        strategy.setSuperEntityColumns("id", "uuid", "del_flag", "last_update_time", "last_update_user_uuid", "create_time", "create_user_uuid");        strategy.setSkipView(true);        strategy.setEntityBooleanColumnRemoveIsPrefix(true);        //strategy.setEntityLombokModel(false);        strategy.setRestControllerStyle(true);        strategy.setSuperControllerClass("com.asto.atg.common.BaseController");        strategy.setSuperServiceImplClass("com.asto.atg.common.BaseServiceImpl");        //strategy.setControllerMappingHyphenStyle(false);        strategy.setTablePrefix(pc.getModuleName() + "_");        mpg.setStrategy(strategy);        //mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }    private static void zlb(String tableName) {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath + "/atg-zlb/src/main/java");        gc.setAuthor("admin");        gc.setFileOverride(true);        gc.setOpen(false);        // gc.setSwagger2(true); 实体属性 Swagger2 注解        gc.setEntityName("%sEntity");        gc.setServiceName("%sService");        gc.setServiceImplName("%sServiceImpl");        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl("jdbc:mysql://192.168.4.160:3306/atg_system_test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8&useSSL=false");        // dsc.setSchemaName("public");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("dev_run");        dsc.setPassword("G1Ark8NDeHSUtjTM");        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();        pc.setParent("com.asto.atg.zlb");        pc.setServiceImpl(pc.getService());        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };       /* // 如果模板引擎是 freemarker        String templatePath = "/templates/mapper.xml.ftl";        // 如果模板引擎是 velocity        // String templatePath = "/templates/mapper.xml.vm";        // 自定义输出配置        List<FileOutConfig> focList = new ArrayList<>();        // 自定义配置会被优先输出        focList.add(new FileOutConfig(templatePath) {            @Override            public String outputFile(TableInfo tableInfo) {                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！                return projectPath + "/src/main/resources/mapper/" + pc.getModuleName()                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;            }        });        *//*        cfg.setFileCreate(new IFileCreate() {            @Override            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {                // 判断自定义文件夹是否需要创建                checkDir("调用默认方法创建的目录");                return false;            }        });        *//*        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        // 配置模板        TemplateConfig templateConfig = new TemplateConfig();        // 配置自定义输出模板        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别        // templateConfig.setEntity("templates/entity2.java");        // templateConfig.setService();        // templateConfig.setController();        templateConfig.setXml(null);        mpg.setTemplate(templateConfig);*/        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setSuperEntityClass("com.asto.atg.common.BaseEntity");        strategy.setInclude(tableName);        strategy.setExclude();        //strategy.setInclude(scanner("表名，多个英文逗号分割").split(","));        strategy.setLogicDeleteFieldName("del_flag");        strategy.setSuperEntityColumns("id", "uuid", "del_flag", "last_update_time", "last_update_user_uuid", "create_time", "create_user_uuid");        strategy.setSkipView(true);        strategy.setEntityBooleanColumnRemoveIsPrefix(true);        //strategy.setEntityLombokModel(false);        strategy.setRestControllerStyle(true);        strategy.setSuperControllerClass("com.asto.atg.common.BaseController");        strategy.setSuperServiceImplClass("com.asto.atg.common.BaseServiceImpl");        //strategy.setControllerMappingHyphenStyle(false);        strategy.setTablePrefix(pc.getModuleName() + "_");        mpg.setStrategy(strategy);        //mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }    public static String scanner(String tip) {        Scanner scanner = new Scanner(System.in);        StringBuilder help = new StringBuilder();        help.append("请输入" + tip + "：");        System.out.println(help.toString());        if (scanner.hasNext()) {            String ipt = scanner.next();            if (StringUtils.isNotEmpty(ipt)) {                return ipt;            }        }        throw new MybatisPlusException("请输入正确的" + tip + "！");    }}