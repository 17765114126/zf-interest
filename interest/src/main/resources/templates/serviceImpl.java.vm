package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
##import com.example.springboot.model.form.Result;
##import com.example.springboot.model.form.Paging;
##import com.example.springboot.model.form.PageUtil;

/**
 * @$!{table.comment}
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class $!{table.serviceImplName} : $!{superServiceImplClass}<$!{table.mapperName}, $!{entity}>(), $!{table.serviceName} {

}
#else
public class $!{table.serviceImplName} extends $!{superServiceImplClass}<$!{table.mapperName}, $!{entity}> implements ${table.serviceName} {

    @Override
    public Result getPage($!{entity} req) {
        Paging paging = new Paging();

        IPage<$!{entity}> ipage = page(paging.toPage(), new LambdaQueryWrapper<$!{entity}>()
                .eq($!{entity}::getInvalid, 0)
                .orderByDesc($!{entity}::getCreateTime));

        Page<$!{entity}> page = PageUtil.toPage(ipage);
        return Result.buildSuccess(PageUtil.convert(page, e -> {
//      VO vo = CopyUtil.copyObject(byId, VO.class);
            return e;
        }));
    }

    @Override
    public Result addInfo($!{entity} req) {
        //主表复制元素
//      VO vo = CopyUtil.copyObject(byId, VO.class);
        boolean flag;
        if (req.getId() != null) {
            flag = updateById(req);
        } else {
            flag = save(req);
        }
        if (flag) {
            return Result.buildSuccess();
        }
        return Result.buildFail();
    }

    @Override
    public Result getInfo(Integer id) {
        return Result.buildSuccess(getById(id));
    }

    @Override
    public Result deleteInfos(String ids) {
        if (update(new UpdateWrapper<$!{entity}>().lambda()
                .set($!{entity}::getInvalid, 1)
                .inSql($!{entity}::getId, ids)
        )) {
            return Result.buildSuccess();
        }
        return Result.buildFail();
    }

}
#end
