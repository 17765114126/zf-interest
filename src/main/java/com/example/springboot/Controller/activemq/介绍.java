package com.example.springboot.Controller.activemq;

/**
 * @ClassName 介绍
 * @Author zhaofu
 * @Date 2019/10/9
 * @Version V1.0
 **/
public class 介绍 {
    /**
     * 参考地址： https://www.cnblogs.com/lzylcf/p/9381446.html
     *
     * 更详细的一篇文章：https://blog.csdn.net/cs_hnu_scw/article/details/81040834
     * */

    /**
     * 运行前准备
     *
     *
     * 从官网中下载activeMQ，下载地址：http://activemq.apache.org/download.html
     *
     * 解压后，打开目录下的bin，根据自己的系统选择win32或win64安装Active服务，并开启activeMQ
     *
     * 开启后浏览器访问该地址：http://127.0.0.1:8161/，选择 Manage ActiveMQ broker，输入账号密码，默认都是admin
     *
     *
     *创建一个maven项目，在pom.xml文件中引入jar包
     *
     * <dependency>
     *     <groupId>org.apache.activemq</groupId>
     *     <artifactId>activemq-all</artifactId>
     *     <version>5.9.0</version>
     * </dependency>
     * */


    /**ActiveMQ介绍
     *
     * ActiveMQ是一种消息中间件，有两种模式，
     * 一种点对点模式 发布者将发布的消息发送给服务器，等待用户监听并接受数据；
     * 第二种订阅模式 发布者将消息发布给消息服务器，让服务器将所有的数据直接转发给再监听的用户，进行一对多通信（类似微信公众号）。
     * ActiveMQ主要是为了降低程序间的耦合，以及异步执行处理时间较长的代码（如网络通信）。

     * 点对点模式：

     * 发布者发布8条信息，这时有3个用户在监听服务器消息，则3个用户共同消费这8条消息。服务器中的每条消息只能被一个用户消费，
     * 这种模式服务器会存储发布者发布的数据，当未被用户接收的数据则会留在服务器中，等待下个监听服务器的用户接收数据。

     * 订阅模式（持久订阅模式/非持久订阅模式）：
     *
     * 发布者发布消息给消息服务器，消息服务器则将消息直接转发给监听的用户，
     * 这要求发布者发布消息的同时用户也在监听消息，若没有用户监听， 则不保留数据，认为数据已发送完成。
     * 也就是发布者发布时，用户没在监听消息，则不会在收到该数据。即使用户以后再监听也接收不到
     * */




    /**
     * 什么是消息中间件？

     * 百度百科解释：消息中间件利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。
     * 通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。
     *
     * 关键点：关注于数据的发送和接受，利用高效可靠的异步消息机制传递机制集成分布式系统。
     *
     * 为什么要使用消息中间件

     * 举几个例子，我想你就会明白了。（其实使用消息中间件主要就是为了解耦合和异步两个作用）
     * 1：微博，都用过吧。那么，当我们新关注一个用户，那么系统会相应的推送消息给我们，并且还做了很多关于我们关注的处理。这就是消息中间件的异步。
     * 2：秒杀系统。100件商品，几十万个人在抢，那这个怎么弄呢？总不能就把服务器给宕机了吧。那么就可以把用户的请求进行缓存，然后再异步处理。
     * 3：系统A给系统B进行通信，而系统B需要对A的消息进行相应处理之后才能给A反馈，这时候，总不能让A就傻傻等着吧。那么，这就是异步的功能。
     *
     *
     * 什么是JMS？

     * Java消息服务（Java Message Service）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。
     * Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。
     * 总结起来说就是：Java对于应用程序之间进行信息交互的API（而且是异步）。
     * 里面有下面的概念需要理解，对后续有帮助：
     *
     * 提供者：实现JMS的消息服务中间件服务器。
     *
     * 客户端：发送或接受消息的应用。
     *
     * 生产者/发布者：创建并发送消息的客户端。
     *
     * 消费者/订阅者：接受并处理消息的客户端。
     *
     * 消息：应用程序之间传递的数据。
     *
     * 消息模式：在客户端之间传递消息的模式，JMS主要是队列模式和主体模式。
     *
     * 队列模式特点：
     * （1）客户端包括生产者和消费者。
     * （2）队列中的一个消息只能被一个消费者使用。
     * （3）消费者可以随时取消息。
     *
     * 主体模式特点：
     * （1）客户端包括发布者和订阅者。
     * （2）主题中的消息可以被所有订阅者消费。
     * （3）消费者不能消费订阅之前发送的消息。
     *
     * 什么是AMQP？

     * AMQP，即Advanced Message Queuing Protocol,一个提供统一消息服务的应用层标准高级消息队列协议,是应用层协议的一个开放标准,为面向消息的中间件设计。
     * 基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。
     * 简单点说：就是对于消息中间件所接受的消息传输层的协议（不懂传输层，那么就需要多看看计算机网络相关知识了，OSI的层次划分），
     * 只有这样才能保证客户端和消息中间件能够进行交互（换位思考：HTTP和HTTPS甚至说是TCP/IP与UDP协议都要的道理）。
     *
     * emmm，比较一下JMS和AMQP的不同吧。。
     *
     * JMS是定义与Java，而AMQP是一种传输层协议。
     *
     * JMS是属于Java的API，而AMQP是跨语言的。
     *
     * JMS消息类型只有两种（主题和队列，后续会说），而AMQP是有五种。
     *
     * JMS主要就是针对Java的开发的Client，而AMQP是面向消息，队列，路由。
     *
     *
     * 什么是ActiveMQ呢？
     * ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。
     * ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现，尽管JMS规范出台已经是很久的事情了，
     * 但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。
     *
     * 简单点说：不就是为了实现我上述所想要的需求嘛。然后它就是一种实现的方式。就比如，Tomcat是什么？不就是为了实现一种client与服务器之间的交互的一种产品嘛。。
     *
     * */
}
